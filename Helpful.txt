import pandas as pd
import matplotlib.pyplot as plt
import tkinter as tk
import os
from tkinter import filedialog

def get_files():
    # Create a root Tk window (usually the first thing for tkinter apps)
    root = tk.Tk()
    
    # This line will hide the main window, we're only interested in the file dialog
    root.withdraw()

    # Open the file dialog and get the path of the selected files
    file_paths = filedialog.askopenfilenames(filetypes=[('CSV Files', '*.csv')])

    # If the user didn't select a file, quit the function
    if not file_paths:
        print("No files selected.")
        return None

    # Return the selected files
    return file_paths

def prediction_results():
    file_paths = get_files()  # corrected from get_file() to get_files()
    if not file_paths:
        return

    # Handle each file separately
    for file_path in file_paths:
        # Load the predictions and results CSV file
        results_df = pd.read_csv(file_path)

        # Convert the 'Actual_Price_After_1min' to float
        results_df["Actual_Price_After_1min"] = pd.to_numeric(results_df["Actual_Price_After_1min"], errors='coerce')

        # Calculate the percentage difference between predictions and true_labels
        results_df["percentage_difference"] = abs(results_df["Predicted_Price"] - results_df["Actual_Price_After_1min"]) / results_df["Actual_Price_After_1min"] * 100

        # Calculate the average percentage difference
        average_percentage_difference = results_df["percentage_difference"].mean()

        print(f"Average percentage difference between predictions and actual values: {average_percentage_difference:.2f}%")

        # Print the distribution of percentage differences
        print("\nDistribution of percentage differences:")
        print(results_df["percentage_difference"].describe())

        # Print some examples of predictions and actual values
        print("\nExamples of predictions and actual values:")
        print(results_df[["Predicted_Price", "Actual_Price_After_1min"]].head(20))

        # Plot the predictions and actual_prices
        plt.figure(figsize=(10, 5))
        plt.plot(results_df["Predicted_Price"].values, label="Predicted")
        plt.plot(results_df["Actual_Price_After_1min"].values, label="Actual")
        plt.legend()
        plt.title("Predicted vs Actual Values")
        plt.xlabel("Index")
        plt.ylabel("Value")
        plt.savefig("predictions_vs_actuals.pdf", format="pdf")
        plt.show()

        # Plot the differences between predicted and actual values
        plt.figure(figsize=(10, 5))
        plt.plot(results_df["Predicted_Price"].values - results_df["Actual_Price_After_1min"].values, label="Difference")
        plt.legend()
        plt.title("Difference between Predicted and Actual Values")
        plt.xlabel("Index")
        plt.ylabel("Difference")
        plt.savefig("predictions_vs_actuals_difference.pdf", format="pdf")
        plt.show()


if __name__ == "__main__":
    while True:
        option = input("Prediction Results: Press P or Q to quit\n")
        if option.lower() == 'p':
            prediction_results()
        elif option.lower() == 'q':
            break
        else:
            print("Invalid option selected.")
